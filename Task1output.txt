
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> install.packages("sqldf")
trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/sqldf_0.4-11.zip'
Content type 'application/zip' length 78409 bytes (76 KB)
downloaded 76 KB

package ‘sqldf’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Szymon\AppData\Local\Temp\RtmpEVR7az\downloaded_packages
> library(sqldf)
Ładowanie wymaganego pakietu: gsubfn
Ładowanie wymaganego pakietu: proto
Ładowanie wymaganego pakietu: RSQLite
Warning messages:
1: pakiet ‘sqldf’ został zbudowany w wersji R 3.6.3 
2: pakiet ‘gsubfn’ został zbudowany w wersji R 3.6.3 
3: pakiet ‘proto’ został zbudowany w wersji R 3.6.3 
4: pakiet ‘RSQLite’ został zbudowany w wersji R 3.6.3 
> 
> check <- function(a){
+   c = all(any(a==FALSE))
+   r= all(any(a==FALSE,2))
+   return (!(c&r))
+ }
> #comment to check
> 
> getwd()
[1] "C:/Users/Szymon/Documents"
> setwd("/Users/Szymon/Desktop/rstudio")
> 
> Badges<-read.csv(file = 'badges.csv')
> 
> Users<-read.csv(file = 'users.csv')
> 
> Posts<-read.csv(file = 'posts.csv')
> 
> Votes<-read.csv(file = 'votes.csv')
> 
> BadgesT1Good<-sqldf("SELECT
+                     Name,
+                     COUNT(*) AS Number,
+                     MIN(Class) AS BestClass
+                     FROM Badges
+                     GROUP BY Name
+                     ORDER BY Number DESC
+                     LIMIT 10")
> 
> T2Good <- sqldf("SELECT Location, COUNT(*) AS Count
+                 FROM (
+                 SELECT Posts.OwnerUserId, Users.Id, Users.Location
+                 FROM Users
+                 JOIN Posts ON Users.Id = Posts.OwnerUserId
+                 )
+                 WHERE Location NOT IN ('')
+                 GROUP BY Location
+                 ORDER BY Count DESC
+                 LIMIT 10")
> 
> T3Good <- sqldf("SELECT
+                 Users.AccountId,
+                 Users.DisplayName,
+                 Users.Location,
+                 AVG(PostAuth.AnswersCount) as AverageAnswersCount
+                 FROM
+                 (
+                 SELECT
+                 AnsCount.AnswersCount,
+                 Posts.Id,
+                 Posts.OwnerUserId
+                 FROM (
+                 SELECT Posts.ParentId, COUNT(*) AS AnswersCount
+                 FROM Posts
+                 WHERE Posts.PostTypeId = 2
+                 GROUP BY Posts.ParentId
+                 ) AS AnsCount
+                 JOIN Posts ON Posts.Id = AnsCount.ParentId
+                 ) AS PostAuth
+                 JOIN Users ON Users.AccountId=PostAuth.OwnerUserId
+                 GROUP BY OwnerUserId
+                 ORDER BY AverageAnswersCount DESC
+                 LIMIT 10")
> 
> T4Good <- sqldf("SELECT
+                 Posts.Title,
+                 UpVotesPerYear.Year,
+                 MAX(UpVotesPerYear.Count) AS Count
+                 FROM (
+                 SELECT
+                 PostId,
+                 COUNT(*) AS Count,
+                 STRFTIME('%Y', Votes.CreationDate) AS Year
+                 FROM Votes
+                 WHERE VoteTypeId=2
+                 GROUP BY PostId, Year
+                 ) AS UpVotesPerYear
+                 JOIN Posts ON Posts.Id=UpVotesPerYear.PostId
+                 WHERE Posts.PostTypeId=1
+                 GROUP BY Year
+                 ORDER BY Year ASC")
> 
> T5Good<-sqldf("SELECT
+               Posts.Title,
+               VotesByAge2.OldVotes
+               FROM Posts
+               JOIN (
+               SELECT
+               PostId,
+               MAX(CASE WHEN VoteDate = 'new' THEN Total ELSE 0 END) NewVotes,
+               MAX(CASE WHEN VoteDate = 'old' THEN Total ELSE 0 END) OldVotes,
+               SUM(Total) AS Votes
+               FROM (
+               SELECT
+               PostId,
+               CASE STRFTIME('%Y', CreationDate)
+               WHEN '2021' THEN 'new'
+               WHEN '2020' THEN 'new'
+               ELSE 'old'
+               END VoteDate,
+               COUNT(*) AS Total
+               FROM Votes
+               WHERE VoteTypeId IN (1, 2, 5)
+               GROUP BY PostId, VoteDate
+               ) AS VotesByAge
+               GROUP BY VotesByAge.PostId
+               HAVING NewVotes=0
+               ) AS VotesByAge2 ON VotesByAge2.PostId=Posts.ID
+               WHERE Posts.PostTypeId=1
+               ORDER BY VotesByAge2.OldVotes DESC
+               LIMIT 10")
> 
> #===================================================================================================
> 
> # Code works but there are too much unefficient stuff so commenting everything would take 1-2 hours
> 
> badges <- Badges[,c("Name","Class")]
> 
> 
> splitted <- split(badges, badges$Name)
> 
> agg1 <- lapply(splitted,FUN = function(x) x[which.min(x$Class), ])
> agg2 <- lapply(splitted,FUN = function(x) nrow(x))
> tmp1<-do.call(rbind.data.frame,agg1)
> tmp2<-do.call(rbind.data.frame,agg2)
> colnames(tmp2)<-c("Count")
> 
> tmp1$ID <- seq.int(nrow(tmp1))
> 
> tmp2$ID <- seq.int(nrow(tmp2))
> 
> T1Base<-merge(tmp1,tmp2,by="ID")
> 
> T1Base<-T1Base[,c("Name","Count","Class")]
> 
> T1Base<-T1Base[order(-T1Base$Count),]
> 
> T1Base <- T1Base[1:10,]
> 
> check(T1Base==BadgesT1Good)
[1] TRUE
Warning message:
In any(a == FALSE, 2) : coercing argument of type 'double' to logical
> 
> #===================================================================================================
> 
> 
> posts <- Posts[,c("OwnerUserId","Score")]
> 
> colnames(posts)[1]<-"Id"
> 
> users <- Users[,c("Id","Location")]
> 
> innerT2<-merge(posts,users,by="Id")
> 
> innerT2<-innerT2[,c("Id","Location")]
> 
> outerT2<-innerT2[innerT2$Location!='',]
> 
> splitted<-split(outerT2, outerT2$Location)
> agg <- lapply(splitted,FUN = function(x) nrow(x))
> tmp<-do.call(rbind.data.frame,agg)
> tmp<-tmp[tmp$c.0L..0L..0L..0L..1L..0L..0L..1L..1L..1L..6L..22L..0L..1L..0L..!=0,]
> tmp<-data.frame(tmp)
> 
> agg1 <- lapply(splitted,FUN = function(x) x[which.min(x$Id), ])
> tmp2<-do.call(rbind.data.frame,agg1)
> 
> tmp$ID <- seq.int(nrow(tmp))
> 
> tmp2$ID <- seq.int(nrow(tmp2))
> 
> T2Base<-merge(tmp,tmp2,by="ID")
> 
> T2Base<-T2Base[,c("Location","tmp")]
> T2Base<-T2Base[order(-T2Base$tmp),]
> T2Base<-T2Base[1:10,]
> 
> check(T2Base==T2Good)
[1] TRUE
Warning message:
In any(a == FALSE, 2) : coercing argument of type 'double' to logical
> 
> #===================================================================================================
> 
> posts3 <- Posts[,c("ParentId","PostTypeId")]
> 
> posts3<-posts3[posts3$PostTypeId==2,]
> 
> posts3tmp<-Posts[,c("Id","OwnerUserId")]
> 
> splitted <- split(posts3, posts3$ParentId)
> 
> agg <- lapply(splitted,FUN = function(x) nrow(x))
> 
> agg2 <- lapply(splitted,FUN = function(x) x[which.min(x$PostTypeId), ])
> 
> tmp<-do.call(rbind.data.frame,agg)
> 
> tmp2<-do.call(rbind.data.frame,agg2)
> 
> tmp$ID <- seq.int(nrow(tmp))
> 
> tmp2$ID <- seq.int(nrow(tmp2))
> 
> T3Inner<-merge(tmp,tmp2,by="ID")
> 
> colnames(T3Inner)[2]<-"Count"
> 
> T3Inner<-T3Inner[,c("ParentId","Count")]
> 
> colnames(T3Inner)[1]<-"Id"
> 
> PostAuth<-merge(T3Inner,posts3tmp,by="Id")
> 
> colnames(PostAuth)[3]<-"AccountId"
> 
> users3Base<-Users[,c("AccountId","DisplayName","Location")]
> 
> T3BeforeSplit<-merge(users3Base,PostAuth,by="AccountId")
> 
> T3BeforeSplit<-T3BeforeSplit[,c("AccountId","DisplayName","Location","Count")]
> 
> by.Count <- by(T3BeforeSplit, T3BeforeSplit$AccountId, FUN = function(x) colMeans(x[4]))
> 
> splitted<-split(T3BeforeSplit, T3BeforeSplit$AccountId)
> 
> agg3 <- lapply(splitted,FUN = function(x) colMeans(x[4]))
> 
> agg4 <- lapply(splitted,FUN = function(x) x[which.min(x$AccountId), ])
> 
> tmp3<-do.call(rbind.data.frame,agg3)
> 
> tmp4<-do.call(rbind.data.frame,agg4)
> 
> tmp3$ID <- seq.int(nrow(tmp3))
> 
> tmp4$ID <- seq.int(nrow(tmp4))
> 
> T3Base<-merge(tmp3,tmp4,by="ID")
> 
> colnames(T3Base)[2]<-"AverageAnswersCount"
> 
> T3Base<-T3Base[,c("AccountId","DisplayName","Location","AverageAnswersCount")]
> 
> T3Base<-T3Base[order(-T3Base$AverageAnswersCount,-T3Base$AccountId),]
> 
> T3Base$AverageAnswersCount<-as.character(T3Base$AverageAnswersCount)
> 
> T3Base<-T3Base[1:10,]
> 
> check(T3Base==T3Good)
[1] TRUE
Warning message:
In any(a == FALSE, 2) : coercing argument of type 'double' to logical
> 
> #===================================================================================================
> 
> 
> votes<-Votes[,c("PostId","VoteTypeId","CreationDate")]
> 
> votes<-votes[votes$VoteTypeId==2,]
> 
> votes$Year<-strftime(votes$CreationDate,format = '%Y')
> 
> votes<-votes[,c("PostId","Year")]
> 
> by.Count <- by(votes, list(votes$PostId,votes$Year), FUN = function(x) nrow(x))
> 
> 
> splitted <- split(votes, list(votes$PostId,votes$Year))
> 
> agg <- lapply(splitted,FUN = function(x) nrow(x))
> 
> agg2 <- lapply(splitted,FUN = function(x) x[which.min(x$PostId), ])
> 
> tmp<-do.call(rbind.data.frame,agg)
> 
> tmp2<-do.call(rbind.data.frame,agg2)
> 
> tmp$ID <- seq.int(nrow(tmp))
> 
> colnames(tmp)[1]<-"Count"
> 
> tmp<-tmp[tmp$Count!=0,]
> 
> tmp$ID <- seq.int(nrow(tmp))
> 
> tmp2$ID <- seq.int(nrow(tmp2))
> 
> T4Inner<-merge(tmp,tmp2,by="ID")
> 
> T4Inner<-T4Inner[,c("PostId","Count","Year")]
> 
> T4Inner<-T4Inner[order(T4Inner$PostId,T4Inner$Year),]
> 
> colnames(T4Inner)[1]<-"Id"
> 
> postsT4<-Posts[Posts$PostTypeId==1,]
> 
> postsT4<-postsT4[,c("Title","Id")]
> 
> merged <- merge(postsT4,T4Inner,by="Id")
> 
> merged<-merged[,c("Title","Year","Count")]
> 
> splitted <- split(merged, merged$Year)
> 
> agg <- lapply(splitted,FUN = function(x) x[which.max(x$Count), ])
> 
> tmp<-do.call(rbind.data.frame,agg)
> 
> check(tmp==T4Good)
[1] TRUE
Warning message:
In any(a == FALSE, 2) : coercing argument of type 'double' to logical